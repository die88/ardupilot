/*Diego Alberto Mercado Ravell @ die_ravell88@hotmail.com */
/*Control flight mode for position control using PTAM
-position and velocity relative to the camera are provided at ptam_pos_vel[6]
-reference roll and pitch angles are used to control x, y position
-z rate is used for altitude
-yaw is set fixed
-if ptam data is not available, the vehicle must try to hove and the pilot can take control (inform the user with the buzzer and leds)
-desired to incorporate optic flow when available!
based on loiter mode*/
#include "Copter.h"
#define ALT_HOLD_ENABLE false

int i_1=0;
float ptam_posVel_0[6]={0,0,0,0,0,0};
float rc_7_norm=1.0,rc_8_norm=1.0;
PtamModeState prev_ptam_state=Ptam_MotorStopped;

/*
 * Init and run calls for ptam flight mode
 */

// ptam_init - initialise ptam controller
bool Copter::ptam_init(bool ignore_checks)
{
#if FRAME_CONFIG == HELI_FRAME
    // do not allow helis to enter Loiter if the Rotor Runup is not complete
    if (!ignore_checks && !motors->rotor_runup_complete()){
        return false;
    }
#endif

    if (PTAM_OK || ignore_checks) {

        // set target to current position
        //wp_nav->init_loiter_target();

            for(int i1=0;i1<6;i1++) ptam_posVel_0[i1]=ptam_pos_vel[i1];

        // initialize vertical speed and acceleration
        if(ALT_HOLD_ENABLE){
               pos_control->set_speed_z(-g.pilot_velocity_z_max, g.pilot_velocity_z_max);
            pos_control->set_accel_z(g.pilot_accel_z);
        // initialise position and desired velocity
            if (!pos_control->is_active_z()) {
            pos_control->set_alt_target_to_current_alt();
            pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
            }
        }
        else  {
                if (motors->armed() && ap.land_complete && !mode_has_manual_throttle(control_mode) &&
                   (get_pilot_desired_throttle(channel_throttle->get_control_in()) > get_non_takeoff_throttle())) {
        return false;
            }
            // set target altitude to zero for reporting
            pos_control->set_alt_target(0);
        }


hal.uartA->printf("A");
    hal.uartC->printf("PTAM mode on! kp:%f kd:%f\n",(float)g.kp_ptam,(float)g.kd_ptam);
    if((float)RC_Channels::rc_channel(CH_6)->get_control_in()>500){
            rc_7_norm=10.0*(1.0-((float)RC_Channels::rc_channel(CH_7)->get_control_in())/997.0);
            rc_8_norm=10.0*((float)RC_Channels::rc_channel(CH_8)->get_control_in()/997.0);
    }
    hal.uartC->printf("rc 6,7,8:\t%.2f\t%.2f\t%.2f\n\n",(float)RC_Channels::rc_channel(CH_6)->get_control_in(),rc_7_norm,rc_8_norm);


        return true;
    }
    else{
        return false;
    }
}

//#if PRECISION_LANDING == ENABLED
//bool Copter::do_precision_loiter()
//{
//    if (!_precision_loiter_enabled) {
//        return false;
//    }
//    if (ap.land_complete_maybe) {
//        return false;        // don't move on the ground
//    }
//    // if the pilot *really* wants to move the vehicle, let them....
//    if (wp_nav->get_pilot_desired_acceleration().length() > 50.0f) {
//        return false;
//    }
//    if (!precland.target_acquired()) {
//        return false; // we don't have a good vector
//    }
//    return true;
//}
//
//void Copter::precision_loiter_xy()
//{
//    wp_nav->clear_pilot_desired_acceleration();
//    Vector2f target_pos, target_vel_rel;
//    if (!precland.get_target_position_cm(target_pos)) {
//        target_pos.x = inertial_nav.get_position().x;
//        target_pos.y = inertial_nav.get_position().y;
//    }
//    if (!precland.get_target_velocity_relative_cms(target_vel_rel)) {
//        target_vel_rel.x = -inertial_nav.get_velocity().x;
//        target_vel_rel.y = -inertial_nav.get_velocity().y;
//    }
//    pos_control->set_xy_target(target_pos.x, target_pos.y);
//    pos_control->override_vehicle_velocity_xy(-target_vel_rel);
//}
//#endif

// _run - runs the  controller
// should be called at 100hz or more
void Copter::ptam_run()
{
    PtamModeState ptam_state;
    float target_yaw_rate = 0.0f;
    float target_climb_rate = 0.0f;
    float takeoff_climb_rate = 0.0f;

    if(ALT_HOLD_ENABLE){
          // initialize vertical speed and acceleration
        pos_control->set_speed_z(-g.pilot_velocity_z_max, g.pilot_velocity_z_max);
        pos_control->set_accel_z(g.pilot_accel_z);
    }


    // process pilot inputs unless we are in radio failsafe
    if (!failsafe.radio) {

        // apply SIMPLE mode transform to pilot inputs
        update_simple_mode();

        // process pilot's roll and pitch input
        wp_nav->set_pilot_desired_acceleration(channel_roll->get_control_in(), channel_pitch->get_control_in());

        // get pilot's desired yaw rate
        target_yaw_rate = get_pilot_desired_yaw_rate(channel_yaw->get_control_in());

    if(ALT_HOLD_ENABLE){
        // get pilot desired climb rate
        target_climb_rate = get_pilot_desired_climb_rate(channel_throttle->get_control_in());
        target_climb_rate = constrain_float(target_climb_rate, -g.pilot_velocity_z_max, g.pilot_velocity_z_max);
        }
 } else {
        // clear out pilot desired acceleration in case radio failsafe event occurs and we do not switch to RTL for some reason
        wp_nav->clear_pilot_desired_acceleration();
    }

    // relax ptam target if we might be landed
    if (ap.land_complete_maybe) {
        wp_nav->loiter_soften_for_landing();
    }

#if FRAME_CONFIG == HELI_FRAME
    // helicopters are held on the ground until rotor speed runup has finished
    bool takeoff_triggered = (ap.land_complete && (target_climb_rate > 0.0f) && motors->rotor_runup_complete());
#else
    bool takeoff_triggered = ap.land_complete && (target_climb_rate > 0.0f);
#endif

    // Loiter State Machine Determination
    if (!motors->armed() || !motors->get_interlock()) {
        ptam_state = Ptam_MotorStopped;
        if(prev_ptam_state!=ptam_state){
                hal.uartC->printf("not armed!\n");
                prev_ptam_state=ptam_state;
        }
    } else if (takeoff_state.running || takeoff_triggered) {
        ptam_state = Ptam_Takeoff;
        if(prev_ptam_state!=ptam_state){
            hal.uartC->printf("take off!\n");
            prev_ptam_state=ptam_state;
        }
    } else if (!ap.auto_armed || ap.land_complete) {
        ptam_state = Ptam_Landed;
        if(prev_ptam_state!=ptam_state){
        hal.uartC->printf("landed!\n");
        prev_ptam_state=ptam_state;
        }
    } else {
        ptam_state = Ptam_Flying;
        if(prev_ptam_state!=ptam_state){
        hal.uartC->printf("flying!\n");
        prev_ptam_state=ptam_state;
        }
    }

    if((float)RC_Channels::rc_channel(CH_6)->get_control_in()>500){
            rc_7_norm=2.0*(1.0-((float)RC_Channels::rc_channel(CH_7)->get_control_in())/997.0);
            rc_8_norm=2.0*((float)RC_Channels::rc_channel(CH_8)->get_control_in())/997.0;
    }

    if(i_1++==50){
             hal.uartC->printf("roll: PD=%.2f\t rc= %d !\n pitch: PD=%.2f\t rc=%d\n",
                          -rc_7_norm*g.kp_ptam*(ptam_pos_vel[0]-ptam_posVel_0[0])-rc_8_norm*g.kd_ptam*(ptam_pos_vel[3]-ptam_posVel_0[3]),channel_roll->get_control_in(),
                          rc_7_norm*g.kp_ptam*(ptam_pos_vel[1]-ptam_posVel_0[1])+rc_8_norm*g.kd_ptam*(ptam_pos_vel[4]-ptam_posVel_0[4]),channel_pitch->get_control_in());
            i_1=0;
        }

        //debug Diego probar que los motores respondan de acuerdo a la posicion
        /* attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(PTAM_PD_control(10.0*(ptam_pos_vel[0]-ptam_posVel_0[0]),10.0*(ptam_pos_vel[3]-ptam_posVel_0[3]),channel_roll->get_control_in()),
                                                                      PTAM_PD_control(-10.0*(ptam_pos_vel[1]-ptam_posVel_0[1]),-10.0*(ptam_pos_vel[4]-ptam_posVel_0[4]),channel_pitch->get_control_in()),
                                                                      target_yaw_rate, get_smoothing_gain());
*/
    if(!ALT_HOLD_ENABLE){
                    //control_stabilize like altitude control
                    // get pilot's desired throttle
           float pilot_throttle_scaled = get_pilot_desired_throttle(channel_throttle->get_control_in());
            // output pilot's throttle
            attitude_control->set_throttle_out(pilot_throttle_scaled, true, g.throttle_filt);
            //hal.uartC->printf("throttle: %.2f\n",pilot_throttle_scaled);
        }


    // Loiter State Machine
    switch (ptam_state) {

    case Ptam_MotorStopped:

        motors->set_desired_spool_state(AP_Motors::DESIRED_SHUT_DOWN);
#if FRAME_CONFIG == HELI_FRAME
    if(ALT_HOLD_ENABLE){
            // force descent rate and call position controller
        pos_control->set_alt_target_from_climb_rate(-abs(g.land_speed), G_Dt, false);
    }


#else
        wp_nav->init_loiter_target();
        attitude_control->reset_rate_controller_I_terms();
        attitude_control->set_yaw_target_to_current_heading();
        pos_control->relax_alt_hold_controllers(0.0f);   // forces throttle output to go to zero
#endif
        wp_nav->update_loiter(ekfGndSpdLimit, ekfNavVelGainScaler);
        //attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(wp_nav->get_roll(), wp_nav->get_pitch(), target_yaw_rate, get_smoothing_gain());
        //pos_control->update_z_controller();
       if(PTAM_OK){
            attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(PTAM_PD_control(ptam_pos_vel[0]-ptam_posVel_0[0],ptam_pos_vel[3]-ptam_posVel_0[3],channel_roll->get_control_in()),
                                                                      PTAM_PD_control(-(ptam_pos_vel[1]-ptam_posVel_0[1]),-(ptam_pos_vel[4]-ptam_posVel_0[4]),channel_pitch->get_control_in()),
                                                                      target_yaw_rate, get_smoothing_gain());
        }
        else {
             attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(0,0,target_yaw_rate, get_smoothing_gain());
        }

        if(ALT_HOLD_ENABLE){
        //Diego  comment
        pos_control->update_z_controller();
    }

        break;

    case Ptam_Takeoff:
        // set motors to full range
        motors->set_desired_spool_state(AP_Motors::DESIRED_THROTTLE_UNLIMITED);

        // initiate take-off
        if (!takeoff_state.running) {
            takeoff_timer_start(constrain_float(g.pilot_takeoff_alt,0.0f,1000.0f));
            // indicate we are taking off
            set_land_complete(false);
            // clear i term when we're taking off
            set_throttle_takeoff();
        }

        // get takeoff adjusted pilot and takeoff climb rates
        takeoff_get_climb_rates(target_climb_rate, takeoff_climb_rate);

        // get avoidance adjusted climb rate
        target_climb_rate = get_avoidance_adjusted_climbrate(target_climb_rate);

        // run  controller
        wp_nav->update_loiter(ekfGndSpdLimit, ekfNavVelGainScaler);

        // call attitude controller
        //attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(wp_nav->get_roll(), wp_nav->get_pitch(), target_yaw_rate, get_smoothing_gain());
        if(PTAM_OK){
            attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(PTAM_PD_control(ptam_pos_vel[0]-ptam_posVel_0[0],ptam_pos_vel[3]-ptam_posVel_0[3],channel_roll->get_control_in()),
                                                                      PTAM_PD_control(-(ptam_pos_vel[1]-ptam_posVel_0[1]),-(ptam_pos_vel[4]-ptam_posVel_0[4]),channel_pitch->get_control_in()),
                                                                      target_yaw_rate, get_smoothing_gain());
        }
        else {
             attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(0,0,target_yaw_rate, get_smoothing_gain());
        }
        // update altitude target and call position controller
        pos_control->set_alt_target_from_climb_rate_ff(target_climb_rate, G_Dt, false);
        pos_control->add_takeoff_climb_rate(takeoff_climb_rate, G_Dt);
        pos_control->update_z_controller();
        break;

    case Ptam_Landed:
        // set motors to spin-when-armed if throttle below deadzone, otherwise full range (but motors will only spin at min throttle)
        if (target_climb_rate < 0.0f) {
            motors->set_desired_spool_state(AP_Motors::DESIRED_SPIN_WHEN_ARMED);
        } else {
            motors->set_desired_spool_state(AP_Motors::DESIRED_THROTTLE_UNLIMITED);
        }
        wp_nav->init_loiter_target();
    if(ALT_HOLD_ENABLE){
        attitude_control->reset_rate_controller_I_terms();
        attitude_control->set_yaw_target_to_current_heading();
        attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(0, 0, 0, get_smoothing_gain());
        pos_control->relax_alt_hold_controllers(0.0f);   // forces throttle output to go to zero
        pos_control->update_z_controller();
    }

        break;

    case Ptam_Flying:


        // set motors to full range
        motors->set_desired_spool_state(AP_Motors::DESIRED_THROTTLE_UNLIMITED);


//#if PRECISION_LANDING == ENABLED
//        if (do_precision_loiter()) {
//            precision_loiter_xy();
//        }
//#endif

        // run ptam controller
        //wp_nav->update_loiter(ekfGndSpdLimit, ekfNavVelGainScaler);

        // call attitude controller
        //attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(wp_nav->get_roll(), wp_nav->get_pitch(), target_yaw_rate, get_smoothing_gain());
        if(PTAM_OK){
            attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(PTAM_PD_control(ptam_pos_vel[0]-ptam_posVel_0[0],ptam_pos_vel[3]-ptam_posVel_0[3],channel_roll->get_control_in()),
                                                                      PTAM_PD_control(-(ptam_pos_vel[1]-ptam_posVel_0[1]),-(ptam_pos_vel[4]-ptam_posVel_0[4]),channel_pitch->get_control_in()),
                                                                      target_yaw_rate, get_smoothing_gain());
        }
        else {
             attitude_control->input_euler_angle_roll_pitch_euler_rate_yaw(0,0,target_yaw_rate, get_smoothing_gain());
        }

        if(ALT_HOLD_ENABLE){
               // adjust climb rate using rangefinder
        if (rangefinder_alt_ok()) {
            // if rangefinder is ok, use surface tracking
            target_climb_rate = get_surface_tracking_climb_rate(target_climb_rate, pos_control->get_alt_target(), G_Dt);
        }

        // get avoidance adjusted climb rate
        target_climb_rate = get_avoidance_adjusted_climbrate(target_climb_rate);

        // update altitude target and call position controller
        pos_control->set_alt_target_from_climb_rate_ff(target_climb_rate, G_Dt, false);
        pos_control->update_z_controller();
       }

        break;
    }
}

float Copter::PTAM_PD_control(float ptam_pos_err,float ptam_vel_err,float pilot_in){
    return sat_die(-rc_7_norm*g.kp_ptam*(ptam_pos_err)-rc_8_norm*g.kd_ptam*(ptam_vel_err)+pilot_in,MAX_ANGLE_PTAM,-MAX_ANGLE_PTAM);
}

float Copter::sat_die(float d,float A,float a){
    if(A<a){
        float a_t=A;
        A=a;
        a=a_t;
    }
    return d>A?A:(d<a?a:d);
}
